// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ATHLETE
  COACH
  HEADCOACH
}

enum FeeType {
  INCOME
  OUTCOME
}

enum GenderType {
  MALE
  FEMALE
}

enum AttendanceStatus {
  ABSENT
  PRESENT
}

enum EventType {
  PROGRAM
  TOURMNAMENT
  EXAM
}

enum SalaryStatus {
  PAID
  UNPAID
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  password      String?
  role          UserRole   @default(ATHLETE)
  emailVerified DateTime?
  image         String?
  gender        GenderType @default(MALE)
  isActive      Boolean    @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  Account       Account[]
  FeeHistory    FeeHistory[]
  Notification  Notification[]
  Applog        Applog[]
  Athlete       Athlete?
  SalaryHistory SalaryHistory[]
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Athlete {
  id               Int       @id @default(autoincrement())
  height           Int?
  weight           Int?
  brithday         DateTime?
  grade            String?
  gradeCertificate String?
  birthCertificate String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  userId String @unique

  FeeHistory        FeeHistory[]
  AttendanceHistory AttendanceHistory[]
  EventParticipant  EventParticipant[]
  Material          Material[]
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Fee {
  id     Int     @id @default(autoincrement())
  name   String
  amount BigInt
  type   FeeType @default(INCOME)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  FeeHistory FeeHistory[]
}

model FeeHistory {
  id     Int     @id @default(autoincrement())
  note   String?
  amount Int
  month  Int
  year   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  athleteId Int?
  feeId     Int
  userId    String?

  Athlete Athlete? @relation(fields: [athleteId], references: [id])
  User    User?    @relation(fields: [userId], references: [id])
  Fee     Fee      @relation(fields: [feeId], references: [id])
}

model Attendance {
  id          Int      @id @default(autoincrement())
  type        String
  date        DateTime
  startTime   String
  endTime     String
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  AttendanceHistory AttendanceHistory[]
}

model AttendanceHistory {
  id     Int              @id @default(autoincrement())
  status AttendanceStatus @default(PRESENT)

  createdAt DateTime @default(now())

  athleteId    Int
  attendanceId Int

  Athlete    Athlete    @relation(fields: [athleteId], references: [id])
  Attendance Attendance @relation(fields: [attendanceId], references: [id])
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  type        EventType @default(EXAM)
  location    String
  description String?
  //NOTE: date with start and end time for 1 day event
  date        DateTime?
  startTime   String?
  endTime     String?
  //NOTE: startDate and endDate for long event
  startDate   DateTime?
  endDate     DateTime?
  grade       String?
  place       String?
  image       String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  EventParticipant EventParticipant[]
}

model EventParticipant {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  athleteId Int?
  eventId   Int?

  Athlete Athlete? @relation(fields: [athleteId], references: [id])
  Event   Event?   @relation(fields: [eventId], references: [id])
}

model Material {
  id          Int     @id @default(autoincrement())
  url         String
  title       String
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  athleteId Int

  Athlete Athlete @relation(fields: [athleteId], references: [id])
}

model Notification {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  createdAt DateTime @default(now())

  userId String

  User User @relation(fields: [userId], references: [id])
}

model Applog {
  id       Int     @id @default(autoincrement())
  note     String?
  response String?

  createdAt DateTime @default(now())

  userId String

  User User @relation(fields: [userId], references: [id])
}

model SalaryHistory {
  id      Int          @id @default(autoincrement())
  total   Int
  percent Int?
  income  Int?
  status  SalaryStatus @default(UNPAID)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  userId String

  User User @relation(fields: [userId], references: [id])
}
